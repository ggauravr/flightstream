syntax = "proto3";

package arrow.flight.protocol;

// Arrow Flight Service definition
service FlightService {
  // Handshake between client and server
  rpc Handshake(stream HandshakeRequest) returns (stream HandshakeResponse);
  
  // List available flights
  rpc ListFlights(Criteria) returns (stream FlightInfo);
  
  // Get flight information
  rpc GetFlightInfo(FlightDescriptor) returns (FlightInfo);
  
  // Get schema for a flight
  rpc GetSchema(FlightDescriptor) returns (SchemaResult);
  
  // Get data stream
  rpc DoGet(Ticket) returns (stream FlightData);
  
  // Send data stream  
  rpc DoPut(stream FlightData) returns (stream PutResult);
  
  // Execute an action
  rpc DoAction(Action) returns (stream Result);
  
  // List available actions
  rpc ListActions(Empty) returns (stream ActionType);
}

// Basic message types
message Empty {}

message HandshakeRequest {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

message HandshakeResponse {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

message Criteria {
  bytes expression = 1;
}

message FlightDescriptor {
  enum DescriptorType {
    UNKNOWN = 0;
    PATH = 1;
    CMD = 2;
  }
  
  DescriptorType type = 1;
  bytes cmd = 2;
  repeated string path = 3;
}

message FlightInfo {
  bytes schema = 1;
  FlightDescriptor flight_descriptor = 2;
  repeated FlightEndpoint endpoint = 3;
  int64 total_records = 4;
  int64 total_bytes = 5;
}

message FlightEndpoint {
  Ticket ticket = 1;
  repeated Location location = 2;
}

message Location {
  string uri = 1;
}

message Ticket {
  bytes ticket = 1;
}

message FlightData {
  FlightDescriptor flight_descriptor = 1;
  bytes data_header = 2;
  bytes app_metadata = 3;
  bytes data_body = 4;
}

message SchemaResult {
  bytes schema = 1;
}

message PutResult {
  bytes app_metadata = 1;
}

message Action {
  string type = 1;
  bytes body = 2;
}

message ActionType {
  string type = 1;
  string description = 2;
}

message Result {
  bytes body = 1;
} 